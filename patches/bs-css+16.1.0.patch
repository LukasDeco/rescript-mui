diff --git a/node_modules/bs-css/src/Css_Js_Core.res b/node_modules/bs-css/src/Css_Js_Core.res
index f2e31ba..1b2257e 100644
--- a/node_modules/bs-css/src/Css_Js_Core.res
+++ b/node_modules/bs-css/src/Css_Js_Core.res
@@ -1155,33 +1155,33 @@ let media = (. query, rules) => S("@media " ++ query, rules)
 let selector = (. selector, rules) => S(selector, rules)
 let pseudoClass = (selector, rules) => PseudoClass(selector, rules)
 
-let active = pseudoClass("active")
-let checked = pseudoClass("checked")
-let default = pseudoClass("default")
-let defined = pseudoClass("defined")
-let disabled = pseudoClass("disabled")
-let empty = pseudoClass("empty")
-let enabled = pseudoClass("enabled")
-let first = pseudoClass("first")
-let firstChild = pseudoClass("first-child")
-let firstOfType = pseudoClass("first-of-type")
-let focus = pseudoClass("focus")
-let focusVisible = pseudoClass("focus-visible")
-let focusWithin = pseudoClass("focus-within")
+let active = rules => pseudoClass("active", rules)
+let checked = rules => pseudoClass("checked", rules)
+let default = rules => pseudoClass("default", rules)
+let defined = rules => pseudoClass("defined", rules)
+let disabled = rules => pseudoClass("disabled", rules)
+let empty = rules => pseudoClass("empty", rules)
+let enabled = rules => pseudoClass("enabled", rules)
+let first = rules => pseudoClass("first", rules)
+let firstChild = rules => pseudoClass("first-child", rules)
+let firstOfType = rules => pseudoClass("first-of-type", rules)
+let focus = rules => pseudoClass("focus", rules)
+let focusVisible = rules => pseudoClass("focus-visible", rules)
+let focusWithin = rules => pseudoClass("focus-within", rules)
 let host = (~selector=?, rules) =>
   switch selector {
   | None => PseudoClass("host", rules)
   | Some(s) => PseudoClassParam("host", s, rules)
   }
-let hover = pseudoClass("hover")
-let indeterminate = pseudoClass("indeterminate")
-let inRange = pseudoClass("in-range")
-let invalid = pseudoClass("invalid")
+let hover = rules => pseudoClass("hover", rules)
+let indeterminate = rules => pseudoClass("indeterminate", rules)
+let inRange = rules => pseudoClass("in-range", rules)
+let invalid = rules => pseudoClass("invalid", rules)
 let lang = (code, rules) => PseudoClassParam("lang", code, rules)
-let lastChild = pseudoClass("last-child")
-let lastOfType = pseudoClass("last-of-type")
+let lastChild = rules => pseudoClass("last-child", rules)
+let lastOfType = rules => pseudoClass("last-of-type", rules)
 //let left = selector(":left");
-let link = pseudoClass("link")
+let link = rules => pseudoClass("link", rules)
 let not_ = (selector, rules) => PseudoClassParam("not", selector, rules)
 module Nth = {
   type t = [#odd | #even | #n(int) | #add(int, int)]
@@ -1197,33 +1197,33 @@ let nthChild = (x, rules) => PseudoClassParam("nth-child", Nth.toString(x), rule
 let nthLastChild = (x, rules) => PseudoClassParam("nth-last-child", Nth.toString(x), rules)
 let nthLastOfType = (x, rules) => PseudoClassParam("nth-last-of-type", Nth.toString(x), rules)
 let nthOfType = (x, rules) => PseudoClassParam("nth-of-type", Nth.toString(x), rules)
-let onlyChild = pseudoClass("only-child")
-let onlyOfType = pseudoClass("only-of-type")
-let optional = pseudoClass("optional")
-let outOfRange = pseudoClass("out-of-range")
-let readOnly = pseudoClass("read-only")
-let readWrite = pseudoClass("read-write")
-let required = pseudoClass("required")
+let onlyChild = rules => pseudoClass("only-child", rules)
+let onlyOfType = rules => pseudoClass("only-of-type", rules)
+let optional = rules => pseudoClass("optional", rules)
+let outOfRange = rules => pseudoClass("out-of-range", rules)
+let readOnly = rules => pseudoClass("read-only", rules)
+let readWrite = rules => pseudoClass("read-write", rules)
+let required = rules => pseudoClass("required", rules)
 //let right = selector(":right");
-let root = pseudoClass("root")
-let scope = pseudoClass("scope")
-let target = pseudoClass("target")
-let valid = pseudoClass("valid")
-let visited = pseudoClass("visited")
-
-let after = selector(. "::after", _)
-let before = selector(. "::before", _)
-let firstLetter = selector(. "::first-letter", _)
-let firstLine = selector(. "::first-line", _)
-let selection = selector(. "::selection", _)
-
-let child = x => selector(. " > " ++ x, _)
-let children = selector(. " > *", _)
-let directSibling = selector(. " + ", _)
-let placeholder = selector(. "::placeholder", _)
-let siblings = selector(. " ~ ", _)
-
-let anyLink = selector(. ":any-link", _)
+let root = rules => pseudoClass("root", rules)
+let scope = rules => pseudoClass("scope", rules)
+let target = rules => pseudoClass("target", rules)
+let valid = rules => pseudoClass("valid", rules)
+let visited = rules => pseudoClass("visited", rules)
+
+let after = rules => selector(. "::after", rules)
+let before = rules => selector(. "::before", rules)
+let firstLetter = rules => selector(. "::first-letter", rules)
+let firstLine = rules => selector(. "::first-line", rules)
+let selection = rules => selector(. "::selection", rules)
+
+let child = (x, rules) => selector(. " > " ++ x, rules)
+let children = rules => selector(. " > *", rules)
+let directSibling = rules => selector(. " + ", rules)
+let placeholder = rules => selector(. "::placeholder", rules)
+let siblings = rules => selector(. " ~ ", rules)
+
+let anyLink = rules => selector(. ":any-link", rules)
 
 /* Type aliasing */
 
diff --git a/node_modules/bs-css/src/Css_Legacy_Core.res b/node_modules/bs-css/src/Css_Legacy_Core.res
index fbdd6d9..1971280 100644
--- a/node_modules/bs-css/src/Css_Legacy_Core.res
+++ b/node_modules/bs-css/src/Css_Legacy_Core.res
@@ -1151,33 +1151,33 @@ let media = (query, rules) => S("@media " ++ query, rules)
 let selector = (selector, rules) => S(selector, rules)
 let pseudoClass = (selector, rules) => PseudoClass(selector, rules)
 
-let active = pseudoClass("active")
-let checked = pseudoClass("checked")
-let default = pseudoClass("default")
-let defined = pseudoClass("defined")
-let disabled = pseudoClass("disabled")
-let empty = pseudoClass("empty")
-let enabled = pseudoClass("enabled")
-let first = pseudoClass("first")
-let firstChild = pseudoClass("first-child")
-let firstOfType = pseudoClass("first-of-type")
-let focus = pseudoClass("focus")
-let focusVisible = pseudoClass("focus-visible")
-let focusWithin = pseudoClass("focus-within")
+let active = rules => pseudoClass("active", rules)
+let checked = rules => pseudoClass("checked", rules)
+let default = rules => pseudoClass("default", rules)
+let defined = rules => pseudoClass("defined", rules)
+let disabled = rules => pseudoClass("disabled", rules)
+let empty = rules => pseudoClass("empty", rules)
+let enabled = rules => pseudoClass("enabled", rules)
+let first = rules => pseudoClass("first", rules)
+let firstChild = rules => pseudoClass("first-child", rules)
+let firstOfType = rules => pseudoClass("first-of-type", rules)
+let focus = rules => pseudoClass("focus", rules)
+let focusVisible = rules => pseudoClass("focus-visible", rules)
+let focusWithin = rules => pseudoClass("focus-within", rules)
 let host = (~selector=?, rules) =>
   switch selector {
   | None => PseudoClass("host", rules)
   | Some(s) => PseudoClassParam("host", s, rules)
   }
-let hover = pseudoClass("hover")
-let indeterminate = pseudoClass("indeterminate")
-let inRange = pseudoClass("in-range")
-let invalid = pseudoClass("invalid")
+let hover = rules => pseudoClass("hover", rules)
+let indeterminate = rules => pseudoClass("indeterminate", rules)
+let inRange = rules => pseudoClass("in-range", rules)
+let invalid = rules => pseudoClass("invalid", rules)
 let lang = (code, rules) => PseudoClassParam("lang", code, rules)
-let lastChild = pseudoClass("last-child")
-let lastOfType = pseudoClass("last-of-type")
+let lastChild = rules => pseudoClass("last-child", rules)
+let lastOfType = rules => pseudoClass("last-of-type", rules)
 //let left = selector(":left");
-let link = pseudoClass("link")
+let link = rules => pseudoClass("link", rules)
 let not_ = (selector, rules) => PseudoClassParam("not", selector, rules)
 module Nth = {
   type t = [#odd | #even | #n(int) | #add(int, int)]
@@ -1193,33 +1193,33 @@ let nthChild = (x, rules) => PseudoClassParam("nth-child", Nth.toString(x), rule
 let nthLastChild = (x, rules) => PseudoClassParam("nth-last-child", Nth.toString(x), rules)
 let nthLastOfType = (x, rules) => PseudoClassParam("nth-last-of-type", Nth.toString(x), rules)
 let nthOfType = (x, rules) => PseudoClassParam("nth-of-type", Nth.toString(x), rules)
-let onlyChild = pseudoClass("only-child")
-let onlyOfType = pseudoClass("only-of-type")
-let optional = pseudoClass("optional")
-let outOfRange = pseudoClass("out-of-range")
-let readOnly = pseudoClass("read-only")
-let readWrite = pseudoClass("read-write")
-let required = pseudoClass("required")
+let onlyChild = rules => pseudoClass("only-child", rules)
+let onlyOfType = rules => pseudoClass("only-of-type", rules)
+let optional = rules => pseudoClass("optional", rules)
+let outOfRange = rules => pseudoClass("out-of-range", rules)
+let readOnly = rules => pseudoClass("read-only", rules)
+let readWrite = rules => pseudoClass("read-write", rules)
+let required = rules => pseudoClass("required", rules)
 //let right = selector(":right");
-let root = pseudoClass("root")
-let scope = pseudoClass("scope")
-let target = pseudoClass("target")
-let valid = pseudoClass("valid")
-let visited = pseudoClass("visited")
-
-let after = selector("::after")
-let before = selector("::before")
-let firstLetter = selector("::first-letter")
-let firstLine = selector("::first-line")
-let selection = selector("::selection")
-
-let child = x => selector(" > " ++ x)
-let children = selector(" > *")
-let directSibling = selector(" + ")
-let placeholder = selector("::placeholder")
-let siblings = selector(" ~ ")
-
-let anyLink = selector(":any-link")
+let root = rules => pseudoClass("root", rules)
+let scope = rules => pseudoClass("scope", rules)
+let target = rules => pseudoClass("target", rules)
+let valid = rules => pseudoClass("valid", rules)
+let visited = rules => pseudoClass("visited", rules)
+
+let after = rules => selector("::after", rules)
+let before = rules => selector("::before", rules)
+let firstLetter = rules => selector("::first-letter", rules)
+let firstLine = rules => selector("::first-line", rules)
+let selection = rules => selector("::selection", rules)
+
+let child = (x, rules) => selector(" > " ++ x, rules)
+let children = rules => selector(" > *", rules)
+let directSibling = rules => selector(" + ", rules)
+let placeholder = rules => selector("::placeholder", rules)
+let siblings = rules => selector(" ~ ", rules)
+
+let anyLink = rules => selector(":any-link", rules)
 
 /* Type aliasing */
 
