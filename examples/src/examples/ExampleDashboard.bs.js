// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Styles from "@mui/styles";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Material from "@mui/material";
import * as ThemeHelpers$Mui from "@rescript-mui/material/src/components/ThemeHelpers.bs.js";
import * as JsxRuntime from "react/jsx-runtime";
import Menu from "@material-ui/icons/Menu";
import ChevronLeft from "@material-ui/icons/ChevronLeft";
import Notifications from "@material-ui/icons/Notifications";

function px_of_int(x) {
  return String(x) + "px";
}

var useStyles = Styles.makeStyles(function (theme) {
      var x = theme.spacing(7);
      var x$1 = theme.spacing(9);
      var x$2 = theme.spacing(3);
      var x$3 = theme.spacing(2);
      return {
              wrapper: {
                background: "#FFFFFF",
                height: "100vh",
                left: "0",
                position: "fixed",
                top: "0",
                width: "100vw",
                zIndex: "999999"
              },
              root: {
                display: "flex"
              },
              toolbar: {
                paddingRight: "24px"
              },
              toolbarIcon: Object.assign({}, {
                    display: "flex",
                    padding: "0 8px",
                    alignItems: "center",
                    justifyContent: "flex-end"
                  }, theme.mixins.toolbar),
              appBar: {
                zIndex: String(theme.zIndex.drawer + 1.0),
                transition: ThemeHelpers$Mui.transitionCreate(theme, true, true, theme.transitions.easing.sharp, theme.transitions.duration.leavingScreen, undefined)
              },
              appBarShift: {
                marginLeft: String(240) + "px",
                width: "calc(100% - $(drawerWidth)px)",
                transition: ThemeHelpers$Mui.transitionCreate(theme, true, true, theme.transitions.easing.sharp, theme.transitions.duration.enteringScreen, undefined)
              },
              menuButton: {
                marginRight: "36px",
                marginLeft: "12px"
              },
              menuButtonHidden: {
                display: "none"
              },
              title: {
                flexGrow: "1"
              },
              drawerPaper: {
                position: "relative",
                whiteSpace: "nowrap",
                width: "$(drawerWidth)px",
                transition: ThemeHelpers$Mui.transitionCreate(theme, true, undefined, theme.transitions.easing.sharp, theme.transitions.duration.enteringScreen, undefined)
              },
              drawerPaperClose: ThemeHelpers$Mui.addBreakpoint({
                    overflowX: "hidden",
                    width: String(x) + "px",
                    transition: ThemeHelpers$Mui.transitionCreate(theme, true, true, theme.transitions.easing.sharp, theme.transitions.duration.leavingScreen, undefined)
                  }, theme, "SM", {
                    width: String(x$1) + "px"
                  }),
              appBarSpacer: theme.mixins.toolbar,
              content: {
                height: "100vh",
                overflow: "auto",
                padding: String(x$2) + "px",
                flexGrow: "1"
              },
              h5: {
                marginBottom: String(x$3) + "px"
              }
            };
    });

var MenuIcon = {};

var NotificationsIcon = {};

var ChevronLeftIcon = {};

function ExampleDashboard(props) {
  var match = React.useReducer((function (param, action) {
          if (action === "Open") {
            return {
                    isOpen: true
                  };
          } else {
            return {
                    isOpen: false
                  };
          }
        }), {
        isOpen: true
      });
  var setState = match[1];
  var state = match[0];
  var match$1 = React.useReducer((function (param, v) {
          return v;
        }), false);
  var setShow = match$1[1];
  var classes = useStyles(undefined);
  return JsxRuntime.jsx("div", {
              children: match$1[0] ? JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx((function (prim) {
                                      return Material.CssBaseline(prim);
                                    }), {}),
                              JsxRuntime.jsx(Material.AppBar, {
                                    children: Caml_option.some(JsxRuntime.jsxs((function (prim) {
                                                return Material.Toolbar(prim);
                                              }), {
                                              className: classes.toolbar,
                                              children: [
                                                JsxRuntime.jsx((function (prim) {
                                                        return Material.IconButton(prim);
                                                      }), {
                                                      className: Js_array.joinWith(" ", [
                                                            classes.menuButton,
                                                            state.isOpen ? classes.menuButtonHidden : ""
                                                          ]),
                                                      children: Caml_option.some(JsxRuntime.jsx(Menu, {})),
                                                      onClick: (function (_event) {
                                                          setState("Open");
                                                        }),
                                                      color: "inherit"
                                                    }),
                                                JsxRuntime.jsx((function (prim) {
                                                        return Material.Typography(prim);
                                                      }), {
                                                      className: classes.title,
                                                      noWrap: true,
                                                      variant: "h6",
                                                      component: "h1",
                                                      children: "Dashboard"
                                                    }),
                                                JsxRuntime.jsx((function (prim) {
                                                        return Material.Link(prim);
                                                      }), {
                                                      color: "text.secondary",
                                                      children: "Close Dashboard",
                                                      href: "#",
                                                      onClick: (function (e) {
                                                          e.preventDefault();
                                                          setShow(false);
                                                        })
                                                    }),
                                                JsxRuntime.jsx((function (prim) {
                                                        return Material.IconButton(prim);
                                                      }), {
                                                      children: Caml_option.some(JsxRuntime.jsx((function (prim) {
                                                                  return Material.Badge(prim);
                                                                }), {
                                                                badgeContent: "4",
                                                                children: Caml_option.some(JsxRuntime.jsx(Notifications, {})),
                                                                color: "secondary"
                                                              })),
                                                      color: "inherit"
                                                    })
                                              ],
                                              disableGutters: !state.isOpen
                                            })),
                                    className: Js_array.joinWith(" ", [
                                          classes.appBar,
                                          state.isOpen ? classes.appBarShift : ""
                                        ]),
                                    position: "absolute"
                                  }),
                              JsxRuntime.jsxs((function (prim) {
                                      return Material.Drawer(prim);
                                    }), {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            children: JsxRuntime.jsx((function (prim) {
                                                    return Material.IconButton(prim);
                                                  }), {
                                                  children: Caml_option.some(JsxRuntime.jsx(ChevronLeft, {})),
                                                  onClick: (function (_event) {
                                                      setState("Close");
                                                    })
                                                }),
                                            className: classes.toolbarIcon
                                          }),
                                      JsxRuntime.jsx((function (prim) {
                                              return Material.Divider(prim);
                                            }), {}),
                                      JsxRuntime.jsx("div", {
                                            children: props.sidebar
                                          })
                                    ],
                                    classes: {
                                      paper: Js_array.joinWith(" ", [
                                            classes.drawerPaper,
                                            state.isOpen ? "" : classes.drawerPaperClose
                                          ])
                                    },
                                    open: state.isOpen,
                                    variant: "permanent"
                                  }),
                              JsxRuntime.jsxs("main", {
                                    children: [
                                      JsxRuntime.jsx("div", {
                                            className: classes.appBarSpacer
                                          }),
                                      JsxRuntime.jsx("div", {
                                            children: props.children
                                          })
                                    ],
                                    className: classes.content
                                  })
                            ],
                            className: classes.root
                          }),
                      className: classes.wrapper
                    }) : JsxRuntime.jsx((function (prim) {
                        return Material.Button(prim);
                      }), {
                      children: "Open Dashboard",
                      onClick: (function (param) {
                          setShow(true);
                        }),
                      color: "primary",
                      variant: "outlined"
                    })
            });
}

var drawerWidth = 240;

var make = ExampleDashboard;

export {
  drawerWidth ,
  px_of_int ,
  useStyles ,
  MenuIcon ,
  NotificationsIcon ,
  ChevronLeftIcon ,
  make ,
}
/* useStyles Not a pure module */
